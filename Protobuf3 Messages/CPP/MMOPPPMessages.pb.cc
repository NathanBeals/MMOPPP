// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOPPPMessages.proto

#include "MMOPPPMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityInput_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EntityUpdate_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace MMOPPP {
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class EntityInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityInput> _instance;
} _EntityInput_default_instance_;
class EntityUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityUpdate> _instance;
} _EntityUpdate_default_instance_;
class WorldUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldUpdate> _instance;
} _WorldUpdate_default_instance_;
class PlayerInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInput> _instance;
} _PlayerInput_default_instance_;
}  // namespace MMOPPP
static void InitDefaultsscc_info_EntityInput_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_EntityInput_default_instance_;
    new (ptr) ::MMOPPP::EntityInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::EntityInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityInput_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EntityInput_MMOPPPMessages_2eproto}, {
      &scc_info_Vector3_MMOPPPMessages_2eproto.base,}};

static void InitDefaultsscc_info_EntityUpdate_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_EntityUpdate_default_instance_;
    new (ptr) ::MMOPPP::EntityUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::EntityUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EntityUpdate_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EntityUpdate_MMOPPPMessages_2eproto}, {
      &scc_info_Identifier_MMOPPPMessages_2eproto.base,
      &scc_info_EntityInput_MMOPPPMessages_2eproto.base,
      &scc_info_Vector3_MMOPPPMessages_2eproto.base,}};

static void InitDefaultsscc_info_Identifier_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_Identifier_default_instance_;
    new (ptr) ::MMOPPP::Identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::Identifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Identifier_MMOPPPMessages_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInput_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_PlayerInput_default_instance_;
    new (ptr) ::MMOPPP::PlayerInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::PlayerInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlayerInput_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlayerInput_MMOPPPMessages_2eproto}, {
      &scc_info_Identifier_MMOPPPMessages_2eproto.base,
      &scc_info_EntityInput_MMOPPPMessages_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Vector3_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_Vector3_default_instance_;
    new (ptr) ::MMOPPP::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_MMOPPPMessages_2eproto}, {}};

static void InitDefaultsscc_info_WorldUpdate_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_WorldUpdate_default_instance_;
    new (ptr) ::MMOPPP::WorldUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::WorldUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldUpdate_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorldUpdate_MMOPPPMessages_2eproto}, {
      &scc_info_EntityUpdate_MMOPPPMessages_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MMOPPPMessages_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MMOPPPMessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MMOPPPMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MMOPPPMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Identifier, name_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Identifier, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityInput, direction_inputs_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityInput, euler_rotation_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityInput, strafe_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityInput, sprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityUpdate, id_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityUpdate, predictive_inputs_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::EntityUpdate, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::WorldUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::WorldUpdate, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::PlayerInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::PlayerInput, id_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::PlayerInput, move_input_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::PlayerInput, sent_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MMOPPP::Vector3)},
  { 8, -1, sizeof(::MMOPPP::Identifier)},
  { 15, -1, sizeof(::MMOPPP::EntityInput)},
  { 24, -1, sizeof(::MMOPPP::EntityUpdate)},
  { 32, -1, sizeof(::MMOPPP::WorldUpdate)},
  { 38, -1, sizeof(::MMOPPP::PlayerInput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_EntityInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_EntityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_WorldUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_PlayerInput_default_instance_),
};

const char descriptor_table_protodef_MMOPPPMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MMOPPPMessages.proto\022\006MMOPPP\032\037google/p"
  "rotobuf/timestamp.proto\"*\n\007Vector3\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"(\n\nIdentifie"
  "r\022\014\n\004name\030\001 \001(\t\022\014\n\004tags\030\002 \001(\t\"\201\001\n\013Entity"
  "Input\022)\n\020direction_inputs\030\003 \001(\0132\017.MMOPPP"
  ".Vector3\022\'\n\016euler_rotation\030\004 \001(\0132\017.MMOPP"
  "P.Vector3\022\016\n\006strafe\030\005 \001(\010\022\016\n\006sprint\030\006 \001("
  "\010\"\201\001\n\014EntityUpdate\022\036\n\002id\030\001 \001(\0132\022.MMOPPP."
  "Identifier\022.\n\021predictive_inputs\030\002 \001(\0132\023."
  "MMOPPP.EntityInput\022!\n\010position\030\003 \001(\0132\017.M"
  "MOPPP.Vector3\"4\n\013WorldUpdate\022%\n\007updates\030"
  "\001 \003(\0132\024.MMOPPP.EntityUpdate\"\205\001\n\013PlayerIn"
  "put\022\036\n\002id\030\001 \001(\0132\022.MMOPPP.Identifier\022\'\n\nm"
  "ove_input\030\002 \001(\0132\023.MMOPPP.EntityInput\022-\n\t"
  "sent_time\030\017 \001(\0132\032.google.protobuf.Timest"
  "ampB\"\252\002\037Google.Protobuf.MMOPPP.Messagesb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MMOPPPMessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MMOPPPMessages_2eproto_sccs[6] = {
  &scc_info_EntityInput_MMOPPPMessages_2eproto.base,
  &scc_info_EntityUpdate_MMOPPPMessages_2eproto.base,
  &scc_info_Identifier_MMOPPPMessages_2eproto.base,
  &scc_info_PlayerInput_MMOPPPMessages_2eproto.base,
  &scc_info_Vector3_MMOPPPMessages_2eproto.base,
  &scc_info_WorldUpdate_MMOPPPMessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MMOPPPMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMOPPPMessages_2eproto = {
  false, false, descriptor_table_protodef_MMOPPPMessages_2eproto, "MMOPPPMessages.proto", 647,
  &descriptor_table_MMOPPPMessages_2eproto_once, descriptor_table_MMOPPPMessages_2eproto_sccs, descriptor_table_MMOPPPMessages_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_MMOPPPMessages_2eproto::offsets,
  file_level_metadata_MMOPPPMessages_2eproto, 6, file_level_enum_descriptors_MMOPPPMessages_2eproto, file_level_service_descriptors_MMOPPPMessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MMOPPPMessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MMOPPPMessages_2eproto)), true);
namespace MMOPPP {

// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:MMOPPP.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:MMOPPP.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
}
class Identifier::_Internal {
 public:
};

Identifier::Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tags().empty()) {
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tags(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MMOPPP.Identifier)
}

void Identifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identifier_MMOPPPMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:MMOPPP.Identifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Identifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Identifier::ArenaDtor(void* object) {
  Identifier* _this = reinterpret_cast< Identifier* >(object);
  (void)_this;
}
void Identifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identifier_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MMOPPP.Identifier.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MMOPPP.Identifier.tags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MMOPPP.Identifier.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string tags = 2;
  if (this->tags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MMOPPP.Identifier.tags");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tags = 2;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.Identifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.tags().size() > 0) {
    _internal_set_tags(from._internal_tags());
  }
}

void Identifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tags_.Swap(&other->tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntityInput::InitAsDefaultInstance() {
  ::MMOPPP::_EntityInput_default_instance_._instance.get_mutable()->direction_inputs_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
  ::MMOPPP::_EntityInput_default_instance_._instance.get_mutable()->euler_rotation_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
}
class EntityInput::_Internal {
 public:
  static const ::MMOPPP::Vector3& direction_inputs(const EntityInput* msg);
  static const ::MMOPPP::Vector3& euler_rotation(const EntityInput* msg);
};

const ::MMOPPP::Vector3&
EntityInput::_Internal::direction_inputs(const EntityInput* msg) {
  return *msg->direction_inputs_;
}
const ::MMOPPP::Vector3&
EntityInput::_Internal::euler_rotation(const EntityInput* msg) {
  return *msg->euler_rotation_;
}
EntityInput::EntityInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.EntityInput)
}
EntityInput::EntityInput(const EntityInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction_inputs()) {
    direction_inputs_ = new ::MMOPPP::Vector3(*from.direction_inputs_);
  } else {
    direction_inputs_ = nullptr;
  }
  if (from._internal_has_euler_rotation()) {
    euler_rotation_ = new ::MMOPPP::Vector3(*from.euler_rotation_);
  } else {
    euler_rotation_ = nullptr;
  }
  ::memcpy(&strafe_, &from.strafe_,
    static_cast<size_t>(reinterpret_cast<char*>(&sprint_) -
    reinterpret_cast<char*>(&strafe_)) + sizeof(sprint_));
  // @@protoc_insertion_point(copy_constructor:MMOPPP.EntityInput)
}

void EntityInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityInput_MMOPPPMessages_2eproto.base);
  ::memset(&direction_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sprint_) -
      reinterpret_cast<char*>(&direction_inputs_)) + sizeof(sprint_));
}

EntityInput::~EntityInput() {
  // @@protoc_insertion_point(destructor:MMOPPP.EntityInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete direction_inputs_;
  if (this != internal_default_instance()) delete euler_rotation_;
}

void EntityInput::ArenaDtor(void* object) {
  EntityInput* _this = reinterpret_cast< EntityInput* >(object);
  (void)_this;
}
void EntityInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityInput& EntityInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityInput_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void EntityInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.EntityInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && direction_inputs_ != nullptr) {
    delete direction_inputs_;
  }
  direction_inputs_ = nullptr;
  if (GetArena() == nullptr && euler_rotation_ != nullptr) {
    delete euler_rotation_;
  }
  euler_rotation_ = nullptr;
  ::memset(&strafe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sprint_) -
      reinterpret_cast<char*>(&strafe_)) + sizeof(sprint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MMOPPP.Vector3 direction_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 euler_rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strafe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          strafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sprint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.EntityInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MMOPPP.Vector3 direction_inputs = 3;
  if (this->has_direction_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::direction_inputs(this), target, stream);
  }

  // .MMOPPP.Vector3 euler_rotation = 4;
  if (this->has_euler_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::euler_rotation(this), target, stream);
  }

  // bool strafe = 5;
  if (this->strafe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_strafe(), target);
  }

  // bool sprint = 6;
  if (this->sprint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_sprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.EntityInput)
  return target;
}

size_t EntityInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.EntityInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MMOPPP.Vector3 direction_inputs = 3;
  if (this->has_direction_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_inputs_);
  }

  // .MMOPPP.Vector3 euler_rotation = 4;
  if (this->has_euler_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_rotation_);
  }

  // bool strafe = 5;
  if (this->strafe() != 0) {
    total_size += 1 + 1;
  }

  // bool sprint = 6;
  if (this->sprint() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.EntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.EntityInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.EntityInput)
    MergeFrom(*source);
  }
}

void EntityInput::MergeFrom(const EntityInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.EntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction_inputs()) {
    _internal_mutable_direction_inputs()->::MMOPPP::Vector3::MergeFrom(from._internal_direction_inputs());
  }
  if (from.has_euler_rotation()) {
    _internal_mutable_euler_rotation()->::MMOPPP::Vector3::MergeFrom(from._internal_euler_rotation());
  }
  if (from.strafe() != 0) {
    _internal_set_strafe(from._internal_strafe());
  }
  if (from.sprint() != 0) {
    _internal_set_sprint(from._internal_sprint());
  }
}

void EntityInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.EntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityInput::CopyFrom(const EntityInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.EntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityInput::IsInitialized() const {
  return true;
}

void EntityInput::InternalSwap(EntityInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityInput, sprint_)
      + sizeof(EntityInput::sprint_)
      - PROTOBUF_FIELD_OFFSET(EntityInput, direction_inputs_)>(
          reinterpret_cast<char*>(&direction_inputs_),
          reinterpret_cast<char*>(&other->direction_inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntityUpdate::InitAsDefaultInstance() {
  ::MMOPPP::_EntityUpdate_default_instance_._instance.get_mutable()->id_ = const_cast< ::MMOPPP::Identifier*>(
      ::MMOPPP::Identifier::internal_default_instance());
  ::MMOPPP::_EntityUpdate_default_instance_._instance.get_mutable()->predictive_inputs_ = const_cast< ::MMOPPP::EntityInput*>(
      ::MMOPPP::EntityInput::internal_default_instance());
  ::MMOPPP::_EntityUpdate_default_instance_._instance.get_mutable()->position_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
}
class EntityUpdate::_Internal {
 public:
  static const ::MMOPPP::Identifier& id(const EntityUpdate* msg);
  static const ::MMOPPP::EntityInput& predictive_inputs(const EntityUpdate* msg);
  static const ::MMOPPP::Vector3& position(const EntityUpdate* msg);
};

const ::MMOPPP::Identifier&
EntityUpdate::_Internal::id(const EntityUpdate* msg) {
  return *msg->id_;
}
const ::MMOPPP::EntityInput&
EntityUpdate::_Internal::predictive_inputs(const EntityUpdate* msg) {
  return *msg->predictive_inputs_;
}
const ::MMOPPP::Vector3&
EntityUpdate::_Internal::position(const EntityUpdate* msg) {
  return *msg->position_;
}
EntityUpdate::EntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.EntityUpdate)
}
EntityUpdate::EntityUpdate(const EntityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::MMOPPP::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_predictive_inputs()) {
    predictive_inputs_ = new ::MMOPPP::EntityInput(*from.predictive_inputs_);
  } else {
    predictive_inputs_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::MMOPPP::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MMOPPP.EntityUpdate)
}

void EntityUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityUpdate_MMOPPPMessages_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&id_)) + sizeof(position_));
}

EntityUpdate::~EntityUpdate() {
  // @@protoc_insertion_point(destructor:MMOPPP.EntityUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete predictive_inputs_;
  if (this != internal_default_instance()) delete position_;
}

void EntityUpdate::ArenaDtor(void* object) {
  EntityUpdate* _this = reinterpret_cast< EntityUpdate* >(object);
  (void)_this;
}
void EntityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityUpdate& EntityUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityUpdate_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void EntityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.EntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && predictive_inputs_ != nullptr) {
    delete predictive_inputs_;
  }
  predictive_inputs_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MMOPPP.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.EntityInput predictive_inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predictive_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.EntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MMOPPP.Identifier id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .MMOPPP.EntityInput predictive_inputs = 2;
  if (this->has_predictive_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::predictive_inputs(this), target, stream);
  }

  // .MMOPPP.Vector3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.EntityUpdate)
  return target;
}

size_t EntityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.EntityUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MMOPPP.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .MMOPPP.EntityInput predictive_inputs = 2;
  if (this->has_predictive_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predictive_inputs_);
  }

  // .MMOPPP.Vector3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.EntityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.EntityUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.EntityUpdate)
    MergeFrom(*source);
  }
}

void EntityUpdate::MergeFrom(const EntityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.EntityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::MMOPPP::Identifier::MergeFrom(from._internal_id());
  }
  if (from.has_predictive_inputs()) {
    _internal_mutable_predictive_inputs()->::MMOPPP::EntityInput::MergeFrom(from._internal_predictive_inputs());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::MMOPPP::Vector3::MergeFrom(from._internal_position());
  }
}

void EntityUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.EntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityUpdate::CopyFrom(const EntityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.EntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityUpdate::IsInitialized() const {
  return true;
}

void EntityUpdate::InternalSwap(EntityUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityUpdate, position_)
      + sizeof(EntityUpdate::position_)
      - PROTOBUF_FIELD_OFFSET(EntityUpdate, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldUpdate::InitAsDefaultInstance() {
}
class WorldUpdate::_Internal {
 public:
};

WorldUpdate::WorldUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.WorldUpdate)
}
WorldUpdate::WorldUpdate(const WorldUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MMOPPP.WorldUpdate)
}

void WorldUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldUpdate_MMOPPPMessages_2eproto.base);
}

WorldUpdate::~WorldUpdate() {
  // @@protoc_insertion_point(destructor:MMOPPP.WorldUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorldUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorldUpdate::ArenaDtor(void* object) {
  WorldUpdate* _this = reinterpret_cast< WorldUpdate* >(object);
  (void)_this;
}
void WorldUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorldUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldUpdate& WorldUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldUpdate_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void WorldUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.WorldUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MMOPPP.EntityUpdate updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.WorldUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MMOPPP.EntityUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.WorldUpdate)
  return target;
}

size_t WorldUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.WorldUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MMOPPP.EntityUpdate updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.WorldUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.WorldUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.WorldUpdate)
    MergeFrom(*source);
  }
}

void WorldUpdate::MergeFrom(const WorldUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.WorldUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void WorldUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.WorldUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldUpdate::CopyFrom(const WorldUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.WorldUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldUpdate::IsInitialized() const {
  return true;
}

void WorldUpdate::InternalSwap(WorldUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInput::InitAsDefaultInstance() {
  ::MMOPPP::_PlayerInput_default_instance_._instance.get_mutable()->id_ = const_cast< ::MMOPPP::Identifier*>(
      ::MMOPPP::Identifier::internal_default_instance());
  ::MMOPPP::_PlayerInput_default_instance_._instance.get_mutable()->move_input_ = const_cast< ::MMOPPP::EntityInput*>(
      ::MMOPPP::EntityInput::internal_default_instance());
  ::MMOPPP::_PlayerInput_default_instance_._instance.get_mutable()->sent_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PlayerInput::_Internal {
 public:
  static const ::MMOPPP::Identifier& id(const PlayerInput* msg);
  static const ::MMOPPP::EntityInput& move_input(const PlayerInput* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_time(const PlayerInput* msg);
};

const ::MMOPPP::Identifier&
PlayerInput::_Internal::id(const PlayerInput* msg) {
  return *msg->id_;
}
const ::MMOPPP::EntityInput&
PlayerInput::_Internal::move_input(const PlayerInput* msg) {
  return *msg->move_input_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PlayerInput::_Internal::sent_time(const PlayerInput* msg) {
  return *msg->sent_time_;
}
void PlayerInput::clear_sent_time() {
  if (GetArena() == nullptr && sent_time_ != nullptr) {
    delete sent_time_;
  }
  sent_time_ = nullptr;
}
PlayerInput::PlayerInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.PlayerInput)
}
PlayerInput::PlayerInput(const PlayerInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::MMOPPP::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_move_input()) {
    move_input_ = new ::MMOPPP::EntityInput(*from.move_input_);
  } else {
    move_input_ = nullptr;
  }
  if (from._internal_has_sent_time()) {
    sent_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_time_);
  } else {
    sent_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MMOPPP.PlayerInput)
}

void PlayerInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInput_MMOPPPMessages_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sent_time_));
}

PlayerInput::~PlayerInput() {
  // @@protoc_insertion_point(destructor:MMOPPP.PlayerInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete move_input_;
  if (this != internal_default_instance()) delete sent_time_;
}

void PlayerInput::ArenaDtor(void* object) {
  PlayerInput* _this = reinterpret_cast< PlayerInput* >(object);
  (void)_this;
}
void PlayerInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInput& PlayerInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInput_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void PlayerInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.PlayerInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && move_input_ != nullptr) {
    delete move_input_;
  }
  move_input_ = nullptr;
  if (GetArena() == nullptr && sent_time_ != nullptr) {
    delete sent_time_;
  }
  sent_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MMOPPP.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.EntityInput move_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.PlayerInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MMOPPP.Identifier id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .MMOPPP.EntityInput move_input = 2;
  if (this->has_move_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::move_input(this), target, stream);
  }

  // .google.protobuf.Timestamp sent_time = 15;
  if (this->has_sent_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::sent_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.PlayerInput)
  return target;
}

size_t PlayerInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.PlayerInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MMOPPP.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .MMOPPP.EntityInput move_input = 2;
  if (this->has_move_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *move_input_);
  }

  // .google.protobuf.Timestamp sent_time = 15;
  if (this->has_sent_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.PlayerInput)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.PlayerInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.PlayerInput)
    MergeFrom(*source);
  }
}

void PlayerInput::MergeFrom(const PlayerInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.PlayerInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::MMOPPP::Identifier::MergeFrom(from._internal_id());
  }
  if (from.has_move_input()) {
    _internal_mutable_move_input()->::MMOPPP::EntityInput::MergeFrom(from._internal_move_input());
  }
  if (from.has_sent_time()) {
    _internal_mutable_sent_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_time());
  }
}

void PlayerInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.PlayerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInput::CopyFrom(const PlayerInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.PlayerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInput::IsInitialized() const {
  return true;
}

void PlayerInput::InternalSwap(PlayerInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInput, sent_time_)
      + sizeof(PlayerInput::sent_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerInput, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MMOPPP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MMOPPP::Vector3* Arena::CreateMaybeMessage< ::MMOPPP::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::Identifier* Arena::CreateMaybeMessage< ::MMOPPP::Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::EntityInput* Arena::CreateMaybeMessage< ::MMOPPP::EntityInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::EntityInput >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::EntityUpdate* Arena::CreateMaybeMessage< ::MMOPPP::EntityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::EntityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::WorldUpdate* Arena::CreateMaybeMessage< ::MMOPPP::WorldUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::WorldUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::PlayerInput* Arena::CreateMaybeMessage< ::MMOPPP::PlayerInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::PlayerInput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
