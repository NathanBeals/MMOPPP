// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOPPPMessages.proto

#include "MMOPPPMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerUpdate_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MMOPPPMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace MMOPPP {
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
class ServerUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerUpdate> _instance;
} _ServerUpdate_default_instance_;
class ServerUpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerUpdates> _instance;
} _ServerUpdates_default_instance_;
class ClientInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientInput> _instance;
} _ClientInput_default_instance_;
}  // namespace MMOPPP
static void InitDefaultsscc_info_ClientInput_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_ClientInput_default_instance_;
    new (ptr) ::MMOPPP::ClientInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::ClientInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientInput_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClientInput_MMOPPPMessages_2eproto}, {
      &scc_info_Input_MMOPPPMessages_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Input_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_Input_default_instance_;
    new (ptr) ::MMOPPP::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Input_MMOPPPMessages_2eproto}, {
      &scc_info_Vector3_MMOPPPMessages_2eproto.base,}};

static void InitDefaultsscc_info_ServerUpdate_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_ServerUpdate_default_instance_;
    new (ptr) ::MMOPPP::ServerUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::ServerUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerUpdate_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ServerUpdate_MMOPPPMessages_2eproto}, {
      &scc_info_Input_MMOPPPMessages_2eproto.base,
      &scc_info_Vector3_MMOPPPMessages_2eproto.base,}};

static void InitDefaultsscc_info_ServerUpdates_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_ServerUpdates_default_instance_;
    new (ptr) ::MMOPPP::ServerUpdates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::ServerUpdates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerUpdates_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerUpdates_MMOPPPMessages_2eproto}, {
      &scc_info_ServerUpdate_MMOPPPMessages_2eproto.base,}};

static void InitDefaultsscc_info_Vector3_MMOPPPMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMOPPP::_Vector3_default_instance_;
    new (ptr) ::MMOPPP::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMOPPP::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MMOPPPMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_MMOPPPMessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MMOPPPMessages_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MMOPPPMessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MMOPPPMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MMOPPPMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, player_move_inputs_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, euler_body_rotation_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, euler_camera_rotation_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, strafe_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::Input, sprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdate, name_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdate, past_inputs_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdate, location_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdate, body_rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ServerUpdates, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ClientInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ClientInput, name_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ClientInput, inputs_),
  PROTOBUF_FIELD_OFFSET(::MMOPPP::ClientInput, sent_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MMOPPP::Vector3)},
  { 8, -1, sizeof(::MMOPPP::Input)},
  { 18, -1, sizeof(::MMOPPP::ServerUpdate)},
  { 27, -1, sizeof(::MMOPPP::ServerUpdates)},
  { 33, -1, sizeof(::MMOPPP::ClientInput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_ServerUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_ServerUpdates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMOPPP::_ClientInput_default_instance_),
};

const char descriptor_table_protodef_MMOPPPMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024MMOPPPMessages.proto\022\006MMOPPP\032\037google/p"
  "rotobuf/timestamp.proto\"*\n\007Vector3\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\262\001\n\005Input\022+\n"
  "\022player_move_inputs\030\003 \001(\0132\017.MMOPPP.Vecto"
  "r3\022,\n\023euler_body_rotation\030\004 \001(\0132\017.MMOPPP"
  ".Vector3\022.\n\025euler_camera_rotation\030\005 \001(\0132"
  "\017.MMOPPP.Vector3\022\016\n\006strafe\030\006 \001(\010\022\016\n\006spri"
  "nt\030\007 \001(\010\"\213\001\n\014ServerUpdate\022\014\n\004name\030\001 \001(\t\022"
  "\"\n\013past_inputs\030\002 \003(\0132\r.MMOPPP.Input\022!\n\010l"
  "ocation\030\003 \001(\0132\017.MMOPPP.Vector3\022&\n\rbody_r"
  "otation\030\004 \001(\0132\017.MMOPPP.Vector3\"6\n\rServer"
  "Updates\022%\n\007updates\030\001 \003(\0132\024.MMOPPP.Server"
  "Update\"i\n\013ClientInput\022\014\n\004name\030\001 \001(\t\022\035\n\006i"
  "nputs\030\002 \001(\0132\r.MMOPPP.Input\022-\n\tsent_time\030"
  "\017 \001(\0132\032.google.protobuf.TimestampB\"\252\002\037Go"
  "ogle.Protobuf.MMOPPP.Messagesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MMOPPPMessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MMOPPPMessages_2eproto_sccs[5] = {
  &scc_info_ClientInput_MMOPPPMessages_2eproto.base,
  &scc_info_Input_MMOPPPMessages_2eproto.base,
  &scc_info_ServerUpdate_MMOPPPMessages_2eproto.base,
  &scc_info_ServerUpdates_MMOPPPMessages_2eproto.base,
  &scc_info_Vector3_MMOPPPMessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MMOPPPMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMOPPPMessages_2eproto = {
  false, false, descriptor_table_protodef_MMOPPPMessages_2eproto, "MMOPPPMessages.proto", 637,
  &descriptor_table_MMOPPPMessages_2eproto_once, descriptor_table_MMOPPPMessages_2eproto_sccs, descriptor_table_MMOPPPMessages_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_MMOPPPMessages_2eproto::offsets,
  file_level_metadata_MMOPPPMessages_2eproto, 5, file_level_enum_descriptors_MMOPPPMessages_2eproto, file_level_service_descriptors_MMOPPPMessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MMOPPPMessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MMOPPPMessages_2eproto)), true);
namespace MMOPPP {

// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:MMOPPP.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:MMOPPP.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::MMOPPP::_Input_default_instance_._instance.get_mutable()->player_move_inputs_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
  ::MMOPPP::_Input_default_instance_._instance.get_mutable()->euler_body_rotation_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
  ::MMOPPP::_Input_default_instance_._instance.get_mutable()->euler_camera_rotation_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
}
class Input::_Internal {
 public:
  static const ::MMOPPP::Vector3& player_move_inputs(const Input* msg);
  static const ::MMOPPP::Vector3& euler_body_rotation(const Input* msg);
  static const ::MMOPPP::Vector3& euler_camera_rotation(const Input* msg);
};

const ::MMOPPP::Vector3&
Input::_Internal::player_move_inputs(const Input* msg) {
  return *msg->player_move_inputs_;
}
const ::MMOPPP::Vector3&
Input::_Internal::euler_body_rotation(const Input* msg) {
  return *msg->euler_body_rotation_;
}
const ::MMOPPP::Vector3&
Input::_Internal::euler_camera_rotation(const Input* msg) {
  return *msg->euler_camera_rotation_;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_move_inputs()) {
    player_move_inputs_ = new ::MMOPPP::Vector3(*from.player_move_inputs_);
  } else {
    player_move_inputs_ = nullptr;
  }
  if (from._internal_has_euler_body_rotation()) {
    euler_body_rotation_ = new ::MMOPPP::Vector3(*from.euler_body_rotation_);
  } else {
    euler_body_rotation_ = nullptr;
  }
  if (from._internal_has_euler_camera_rotation()) {
    euler_camera_rotation_ = new ::MMOPPP::Vector3(*from.euler_camera_rotation_);
  } else {
    euler_camera_rotation_ = nullptr;
  }
  ::memcpy(&strafe_, &from.strafe_,
    static_cast<size_t>(reinterpret_cast<char*>(&sprint_) -
    reinterpret_cast<char*>(&strafe_)) + sizeof(sprint_));
  // @@protoc_insertion_point(copy_constructor:MMOPPP.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_MMOPPPMessages_2eproto.base);
  ::memset(&player_move_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sprint_) -
      reinterpret_cast<char*>(&player_move_inputs_)) + sizeof(sprint_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:MMOPPP.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_move_inputs_;
  if (this != internal_default_instance()) delete euler_body_rotation_;
  if (this != internal_default_instance()) delete euler_camera_rotation_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_move_inputs_ != nullptr) {
    delete player_move_inputs_;
  }
  player_move_inputs_ = nullptr;
  if (GetArena() == nullptr && euler_body_rotation_ != nullptr) {
    delete euler_body_rotation_;
  }
  euler_body_rotation_ = nullptr;
  if (GetArena() == nullptr && euler_camera_rotation_ != nullptr) {
    delete euler_camera_rotation_;
  }
  euler_camera_rotation_ = nullptr;
  ::memset(&strafe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sprint_) -
      reinterpret_cast<char*>(&strafe_)) + sizeof(sprint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MMOPPP.Vector3 player_move_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_move_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 euler_body_rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_body_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 euler_camera_rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_camera_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strafe = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          strafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sprint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MMOPPP.Vector3 player_move_inputs = 3;
  if (this->has_player_move_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player_move_inputs(this), target, stream);
  }

  // .MMOPPP.Vector3 euler_body_rotation = 4;
  if (this->has_euler_body_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::euler_body_rotation(this), target, stream);
  }

  // .MMOPPP.Vector3 euler_camera_rotation = 5;
  if (this->has_euler_camera_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::euler_camera_rotation(this), target, stream);
  }

  // bool strafe = 6;
  if (this->strafe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_strafe(), target);
  }

  // bool sprint = 7;
  if (this->sprint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sprint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MMOPPP.Vector3 player_move_inputs = 3;
  if (this->has_player_move_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_move_inputs_);
  }

  // .MMOPPP.Vector3 euler_body_rotation = 4;
  if (this->has_euler_body_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_body_rotation_);
  }

  // .MMOPPP.Vector3 euler_camera_rotation = 5;
  if (this->has_euler_camera_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_camera_rotation_);
  }

  // bool strafe = 6;
  if (this->strafe() != 0) {
    total_size += 1 + 1;
  }

  // bool sprint = 7;
  if (this->sprint() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_move_inputs()) {
    _internal_mutable_player_move_inputs()->::MMOPPP::Vector3::MergeFrom(from._internal_player_move_inputs());
  }
  if (from.has_euler_body_rotation()) {
    _internal_mutable_euler_body_rotation()->::MMOPPP::Vector3::MergeFrom(from._internal_euler_body_rotation());
  }
  if (from.has_euler_camera_rotation()) {
    _internal_mutable_euler_camera_rotation()->::MMOPPP::Vector3::MergeFrom(from._internal_euler_camera_rotation());
  }
  if (from.strafe() != 0) {
    _internal_set_strafe(from._internal_strafe());
  }
  if (from.sprint() != 0) {
    _internal_set_sprint(from._internal_sprint());
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, sprint_)
      + sizeof(Input::sprint_)
      - PROTOBUF_FIELD_OFFSET(Input, player_move_inputs_)>(
          reinterpret_cast<char*>(&player_move_inputs_),
          reinterpret_cast<char*>(&other->player_move_inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerUpdate::InitAsDefaultInstance() {
  ::MMOPPP::_ServerUpdate_default_instance_._instance.get_mutable()->location_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
  ::MMOPPP::_ServerUpdate_default_instance_._instance.get_mutable()->body_rotation_ = const_cast< ::MMOPPP::Vector3*>(
      ::MMOPPP::Vector3::internal_default_instance());
}
class ServerUpdate::_Internal {
 public:
  static const ::MMOPPP::Vector3& location(const ServerUpdate* msg);
  static const ::MMOPPP::Vector3& body_rotation(const ServerUpdate* msg);
};

const ::MMOPPP::Vector3&
ServerUpdate::_Internal::location(const ServerUpdate* msg) {
  return *msg->location_;
}
const ::MMOPPP::Vector3&
ServerUpdate::_Internal::body_rotation(const ServerUpdate* msg) {
  return *msg->body_rotation_;
}
ServerUpdate::ServerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  past_inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.ServerUpdate)
}
ServerUpdate::ServerUpdate(const ServerUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      past_inputs_(from.past_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::MMOPPP::Vector3(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_body_rotation()) {
    body_rotation_ = new ::MMOPPP::Vector3(*from.body_rotation_);
  } else {
    body_rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MMOPPP.ServerUpdate)
}

void ServerUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerUpdate_MMOPPPMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_rotation_) -
      reinterpret_cast<char*>(&location_)) + sizeof(body_rotation_));
}

ServerUpdate::~ServerUpdate() {
  // @@protoc_insertion_point(destructor:MMOPPP.ServerUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete body_rotation_;
}

void ServerUpdate::ArenaDtor(void* object) {
  ServerUpdate* _this = reinterpret_cast< ServerUpdate* >(object);
  (void)_this;
}
void ServerUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerUpdate& ServerUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerUpdate_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void ServerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.ServerUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  past_inputs_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && body_rotation_ != nullptr) {
    delete body_rotation_;
  }
  body_rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MMOPPP.ServerUpdate.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MMOPPP.Input past_inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_past_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Vector3 body_rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.ServerUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MMOPPP.ServerUpdate.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .MMOPPP.Input past_inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_past_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_past_inputs(i), target, stream);
  }

  // .MMOPPP.Vector3 location = 3;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // .MMOPPP.Vector3 body_rotation = 4;
  if (this->has_body_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::body_rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.ServerUpdate)
  return target;
}

size_t ServerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.ServerUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MMOPPP.Input past_inputs = 2;
  total_size += 1UL * this->_internal_past_inputs_size();
  for (const auto& msg : this->past_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .MMOPPP.Vector3 location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .MMOPPP.Vector3 body_rotation = 4;
  if (this->has_body_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.ServerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.ServerUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.ServerUpdate)
    MergeFrom(*source);
  }
}

void ServerUpdate::MergeFrom(const ServerUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.ServerUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  past_inputs_.MergeFrom(from.past_inputs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::MMOPPP::Vector3::MergeFrom(from._internal_location());
  }
  if (from.has_body_rotation()) {
    _internal_mutable_body_rotation()->::MMOPPP::Vector3::MergeFrom(from._internal_body_rotation());
  }
}

void ServerUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.ServerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUpdate::CopyFrom(const ServerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.ServerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUpdate::IsInitialized() const {
  return true;
}

void ServerUpdate::InternalSwap(ServerUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  past_inputs_.InternalSwap(&other->past_inputs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerUpdate, body_rotation_)
      + sizeof(ServerUpdate::body_rotation_)
      - PROTOBUF_FIELD_OFFSET(ServerUpdate, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerUpdates::InitAsDefaultInstance() {
}
class ServerUpdates::_Internal {
 public:
};

ServerUpdates::ServerUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.ServerUpdates)
}
ServerUpdates::ServerUpdates(const ServerUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MMOPPP.ServerUpdates)
}

void ServerUpdates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerUpdates_MMOPPPMessages_2eproto.base);
}

ServerUpdates::~ServerUpdates() {
  // @@protoc_insertion_point(destructor:MMOPPP.ServerUpdates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerUpdates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerUpdates::ArenaDtor(void* object) {
  ServerUpdates* _this = reinterpret_cast< ServerUpdates* >(object);
  (void)_this;
}
void ServerUpdates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerUpdates& ServerUpdates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerUpdates_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void ServerUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.ServerUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MMOPPP.ServerUpdate updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUpdates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.ServerUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MMOPPP.ServerUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.ServerUpdates)
  return target;
}

size_t ServerUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.ServerUpdates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MMOPPP.ServerUpdate updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUpdates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.ServerUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerUpdates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerUpdates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.ServerUpdates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.ServerUpdates)
    MergeFrom(*source);
  }
}

void ServerUpdates::MergeFrom(const ServerUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.ServerUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void ServerUpdates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.ServerUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUpdates::CopyFrom(const ServerUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.ServerUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUpdates::IsInitialized() const {
  return true;
}

void ServerUpdates::InternalSwap(ServerUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerUpdates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientInput::InitAsDefaultInstance() {
  ::MMOPPP::_ClientInput_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::MMOPPP::Input*>(
      ::MMOPPP::Input::internal_default_instance());
  ::MMOPPP::_ClientInput_default_instance_._instance.get_mutable()->sent_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ClientInput::_Internal {
 public:
  static const ::MMOPPP::Input& inputs(const ClientInput* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_time(const ClientInput* msg);
};

const ::MMOPPP::Input&
ClientInput::_Internal::inputs(const ClientInput* msg) {
  return *msg->inputs_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ClientInput::_Internal::sent_time(const ClientInput* msg) {
  return *msg->sent_time_;
}
void ClientInput::clear_sent_time() {
  if (GetArena() == nullptr && sent_time_ != nullptr) {
    delete sent_time_;
  }
  sent_time_ = nullptr;
}
ClientInput::ClientInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMOPPP.ClientInput)
}
ClientInput::ClientInput(const ClientInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_inputs()) {
    inputs_ = new ::MMOPPP::Input(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_sent_time()) {
    sent_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_time_);
  } else {
    sent_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MMOPPP.ClientInput)
}

void ClientInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientInput_MMOPPPMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_time_) -
      reinterpret_cast<char*>(&inputs_)) + sizeof(sent_time_));
}

ClientInput::~ClientInput() {
  // @@protoc_insertion_point(destructor:MMOPPP.ClientInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete sent_time_;
}

void ClientInput::ArenaDtor(void* object) {
  ClientInput* _this = reinterpret_cast< ClientInput* >(object);
  (void)_this;
}
void ClientInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientInput& ClientInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientInput_MMOPPPMessages_2eproto.base);
  return *internal_default_instance();
}


void ClientInput::Clear() {
// @@protoc_insertion_point(message_clear_start:MMOPPP.ClientInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  if (GetArena() == nullptr && sent_time_ != nullptr) {
    delete sent_time_;
  }
  sent_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MMOPPP.ClientInput.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MMOPPP.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMOPPP.ClientInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MMOPPP.ClientInput.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .MMOPPP.Input inputs = 2;
  if (this->has_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inputs(this), target, stream);
  }

  // .google.protobuf.Timestamp sent_time = 15;
  if (this->has_sent_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::sent_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMOPPP.ClientInput)
  return target;
}

size_t ClientInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMOPPP.ClientInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .MMOPPP.Input inputs = 2;
  if (this->has_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  // .google.protobuf.Timestamp sent_time = 15;
  if (this->has_sent_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMOPPP.ClientInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMOPPP.ClientInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMOPPP.ClientInput)
    MergeFrom(*source);
  }
}

void ClientInput::MergeFrom(const ClientInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMOPPP.ClientInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_inputs()) {
    _internal_mutable_inputs()->::MMOPPP::Input::MergeFrom(from._internal_inputs());
  }
  if (from.has_sent_time()) {
    _internal_mutable_sent_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_time());
  }
}

void ClientInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMOPPP.ClientInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInput::CopyFrom(const ClientInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMOPPP.ClientInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInput::IsInitialized() const {
  return true;
}

void ClientInput::InternalSwap(ClientInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInput, sent_time_)
      + sizeof(ClientInput::sent_time_)
      - PROTOBUF_FIELD_OFFSET(ClientInput, inputs_)>(
          reinterpret_cast<char*>(&inputs_),
          reinterpret_cast<char*>(&other->inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MMOPPP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MMOPPP::Vector3* Arena::CreateMaybeMessage< ::MMOPPP::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::Input* Arena::CreateMaybeMessage< ::MMOPPP::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::ServerUpdate* Arena::CreateMaybeMessage< ::MMOPPP::ServerUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::ServerUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::ServerUpdates* Arena::CreateMaybeMessage< ::MMOPPP::ServerUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::ServerUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::MMOPPP::ClientInput* Arena::CreateMaybeMessage< ::MMOPPP::ClientInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMOPPP::ClientInput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
