// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOPPPMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MMOPPPMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMOPPPMessages_2eproto;
namespace MMOPPP {
class EntityInput;
class EntityInputDefaultTypeInternal;
extern EntityInputDefaultTypeInternal _EntityInput_default_instance_;
class EntityUpdate;
class EntityUpdateDefaultTypeInternal;
extern EntityUpdateDefaultTypeInternal _EntityUpdate_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class PlayerInput;
class PlayerInputDefaultTypeInternal;
extern PlayerInputDefaultTypeInternal _PlayerInput_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class WorldUpdate;
class WorldUpdateDefaultTypeInternal;
extern WorldUpdateDefaultTypeInternal _WorldUpdate_default_instance_;
}  // namespace MMOPPP
PROTOBUF_NAMESPACE_OPEN
template<> ::MMOPPP::EntityInput* Arena::CreateMaybeMessage<::MMOPPP::EntityInput>(Arena*);
template<> ::MMOPPP::EntityUpdate* Arena::CreateMaybeMessage<::MMOPPP::EntityUpdate>(Arena*);
template<> ::MMOPPP::Identifier* Arena::CreateMaybeMessage<::MMOPPP::Identifier>(Arena*);
template<> ::MMOPPP::PlayerInput* Arena::CreateMaybeMessage<::MMOPPP::PlayerInput>(Arena*);
template<> ::MMOPPP::Vector3* Arena::CreateMaybeMessage<::MMOPPP::Vector3>(Arena*);
template<> ::MMOPPP::WorldUpdate* Arena::CreateMaybeMessage<::MMOPPP::WorldUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MMOPPP {

// ===================================================================

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {};
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:MMOPPP.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class Identifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.Identifier) */ {
 public:
  inline Identifier() : Identifier(nullptr) {};
  virtual ~Identifier();

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.Identifier";
  }
  protected:
  explicit Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTagsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tags = 2;
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tags();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tags(
      std::string* tags);
  private:
  const std::string& _internal_tags() const;
  void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // @@protoc_insertion_point(class_scope:MMOPPP.Identifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class EntityInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.EntityInput) */ {
 public:
  inline EntityInput() : EntityInput(nullptr) {};
  virtual ~EntityInput();

  EntityInput(const EntityInput& from);
  EntityInput(EntityInput&& from) noexcept
    : EntityInput() {
    *this = ::std::move(from);
  }

  inline EntityInput& operator=(const EntityInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityInput& operator=(EntityInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityInput* internal_default_instance() {
    return reinterpret_cast<const EntityInput*>(
               &_EntityInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EntityInput& a, EntityInput& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityInput* New() const final {
    return CreateMaybeMessage<EntityInput>(nullptr);
  }

  EntityInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityInput& from);
  void MergeFrom(const EntityInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.EntityInput";
  }
  protected:
  explicit EntityInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionInputsFieldNumber = 3,
    kEulerRotationFieldNumber = 4,
    kStrafeFieldNumber = 5,
    kSprintFieldNumber = 6,
  };
  // .MMOPPP.Vector3 direction_inputs = 3;
  bool has_direction_inputs() const;
  private:
  bool _internal_has_direction_inputs() const;
  public:
  void clear_direction_inputs();
  const ::MMOPPP::Vector3& direction_inputs() const;
  ::MMOPPP::Vector3* release_direction_inputs();
  ::MMOPPP::Vector3* mutable_direction_inputs();
  void set_allocated_direction_inputs(::MMOPPP::Vector3* direction_inputs);
  private:
  const ::MMOPPP::Vector3& _internal_direction_inputs() const;
  ::MMOPPP::Vector3* _internal_mutable_direction_inputs();
  public:
  void unsafe_arena_set_allocated_direction_inputs(
      ::MMOPPP::Vector3* direction_inputs);
  ::MMOPPP::Vector3* unsafe_arena_release_direction_inputs();

  // .MMOPPP.Vector3 euler_rotation = 4;
  bool has_euler_rotation() const;
  private:
  bool _internal_has_euler_rotation() const;
  public:
  void clear_euler_rotation();
  const ::MMOPPP::Vector3& euler_rotation() const;
  ::MMOPPP::Vector3* release_euler_rotation();
  ::MMOPPP::Vector3* mutable_euler_rotation();
  void set_allocated_euler_rotation(::MMOPPP::Vector3* euler_rotation);
  private:
  const ::MMOPPP::Vector3& _internal_euler_rotation() const;
  ::MMOPPP::Vector3* _internal_mutable_euler_rotation();
  public:
  void unsafe_arena_set_allocated_euler_rotation(
      ::MMOPPP::Vector3* euler_rotation);
  ::MMOPPP::Vector3* unsafe_arena_release_euler_rotation();

  // bool strafe = 5;
  void clear_strafe();
  bool strafe() const;
  void set_strafe(bool value);
  private:
  bool _internal_strafe() const;
  void _internal_set_strafe(bool value);
  public:

  // bool sprint = 6;
  void clear_sprint();
  bool sprint() const;
  void set_sprint(bool value);
  private:
  bool _internal_sprint() const;
  void _internal_set_sprint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MMOPPP.EntityInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MMOPPP::Vector3* direction_inputs_;
  ::MMOPPP::Vector3* euler_rotation_;
  bool strafe_;
  bool sprint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class EntityUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.EntityUpdate) */ {
 public:
  inline EntityUpdate() : EntityUpdate(nullptr) {};
  virtual ~EntityUpdate();

  EntityUpdate(const EntityUpdate& from);
  EntityUpdate(EntityUpdate&& from) noexcept
    : EntityUpdate() {
    *this = ::std::move(from);
  }

  inline EntityUpdate& operator=(const EntityUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityUpdate& operator=(EntityUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityUpdate* internal_default_instance() {
    return reinterpret_cast<const EntityUpdate*>(
               &_EntityUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EntityUpdate& a, EntityUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityUpdate* New() const final {
    return CreateMaybeMessage<EntityUpdate>(nullptr);
  }

  EntityUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityUpdate& from);
  void MergeFrom(const EntityUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.EntityUpdate";
  }
  protected:
  explicit EntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPredictiveInputsFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // .MMOPPP.Identifier id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::MMOPPP::Identifier& id() const;
  ::MMOPPP::Identifier* release_id();
  ::MMOPPP::Identifier* mutable_id();
  void set_allocated_id(::MMOPPP::Identifier* id);
  private:
  const ::MMOPPP::Identifier& _internal_id() const;
  ::MMOPPP::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::MMOPPP::Identifier* id);
  ::MMOPPP::Identifier* unsafe_arena_release_id();

  // .MMOPPP.EntityInput predictive_inputs = 2;
  bool has_predictive_inputs() const;
  private:
  bool _internal_has_predictive_inputs() const;
  public:
  void clear_predictive_inputs();
  const ::MMOPPP::EntityInput& predictive_inputs() const;
  ::MMOPPP::EntityInput* release_predictive_inputs();
  ::MMOPPP::EntityInput* mutable_predictive_inputs();
  void set_allocated_predictive_inputs(::MMOPPP::EntityInput* predictive_inputs);
  private:
  const ::MMOPPP::EntityInput& _internal_predictive_inputs() const;
  ::MMOPPP::EntityInput* _internal_mutable_predictive_inputs();
  public:
  void unsafe_arena_set_allocated_predictive_inputs(
      ::MMOPPP::EntityInput* predictive_inputs);
  ::MMOPPP::EntityInput* unsafe_arena_release_predictive_inputs();

  // .MMOPPP.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MMOPPP::Vector3& position() const;
  ::MMOPPP::Vector3* release_position();
  ::MMOPPP::Vector3* mutable_position();
  void set_allocated_position(::MMOPPP::Vector3* position);
  private:
  const ::MMOPPP::Vector3& _internal_position() const;
  ::MMOPPP::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::MMOPPP::Vector3* position);
  ::MMOPPP::Vector3* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:MMOPPP.EntityUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MMOPPP::Identifier* id_;
  ::MMOPPP::EntityInput* predictive_inputs_;
  ::MMOPPP::Vector3* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class WorldUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.WorldUpdate) */ {
 public:
  inline WorldUpdate() : WorldUpdate(nullptr) {};
  virtual ~WorldUpdate();

  WorldUpdate(const WorldUpdate& from);
  WorldUpdate(WorldUpdate&& from) noexcept
    : WorldUpdate() {
    *this = ::std::move(from);
  }

  inline WorldUpdate& operator=(const WorldUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldUpdate& operator=(WorldUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldUpdate* internal_default_instance() {
    return reinterpret_cast<const WorldUpdate*>(
               &_WorldUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorldUpdate& a, WorldUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldUpdate* New() const final {
    return CreateMaybeMessage<WorldUpdate>(nullptr);
  }

  WorldUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldUpdate& from);
  void MergeFrom(const WorldUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.WorldUpdate";
  }
  protected:
  explicit WorldUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .MMOPPP.EntityUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::MMOPPP::EntityUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::EntityUpdate >*
      mutable_updates();
  private:
  const ::MMOPPP::EntityUpdate& _internal_updates(int index) const;
  ::MMOPPP::EntityUpdate* _internal_add_updates();
  public:
  const ::MMOPPP::EntityUpdate& updates(int index) const;
  ::MMOPPP::EntityUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::EntityUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:MMOPPP.WorldUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::EntityUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.PlayerInput) */ {
 public:
  inline PlayerInput() : PlayerInput(nullptr) {};
  virtual ~PlayerInput();

  PlayerInput(const PlayerInput& from);
  PlayerInput(PlayerInput&& from) noexcept
    : PlayerInput() {
    *this = ::std::move(from);
  }

  inline PlayerInput& operator=(const PlayerInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInput& operator=(PlayerInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInput* internal_default_instance() {
    return reinterpret_cast<const PlayerInput*>(
               &_PlayerInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerInput& a, PlayerInput& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInput* New() const final {
    return CreateMaybeMessage<PlayerInput>(nullptr);
  }

  PlayerInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInput& from);
  void MergeFrom(const PlayerInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.PlayerInput";
  }
  protected:
  explicit PlayerInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMoveInputFieldNumber = 2,
    kSentTimeFieldNumber = 15,
  };
  // .MMOPPP.Identifier id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::MMOPPP::Identifier& id() const;
  ::MMOPPP::Identifier* release_id();
  ::MMOPPP::Identifier* mutable_id();
  void set_allocated_id(::MMOPPP::Identifier* id);
  private:
  const ::MMOPPP::Identifier& _internal_id() const;
  ::MMOPPP::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::MMOPPP::Identifier* id);
  ::MMOPPP::Identifier* unsafe_arena_release_id();

  // .MMOPPP.EntityInput move_input = 2;
  bool has_move_input() const;
  private:
  bool _internal_has_move_input() const;
  public:
  void clear_move_input();
  const ::MMOPPP::EntityInput& move_input() const;
  ::MMOPPP::EntityInput* release_move_input();
  ::MMOPPP::EntityInput* mutable_move_input();
  void set_allocated_move_input(::MMOPPP::EntityInput* move_input);
  private:
  const ::MMOPPP::EntityInput& _internal_move_input() const;
  ::MMOPPP::EntityInput* _internal_mutable_move_input();
  public:
  void unsafe_arena_set_allocated_move_input(
      ::MMOPPP::EntityInput* move_input);
  ::MMOPPP::EntityInput* unsafe_arena_release_move_input();

  // .google.protobuf.Timestamp sent_time = 15;
  bool has_sent_time() const;
  private:
  bool _internal_has_sent_time() const;
  public:
  void clear_sent_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& sent_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_sent_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sent_time();
  void set_allocated_sent_time(PROTOBUF_NAMESPACE_ID::Timestamp* sent_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sent_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sent_time();
  public:
  void unsafe_arena_set_allocated_sent_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* sent_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sent_time();

  // @@protoc_insertion_point(class_scope:MMOPPP.PlayerInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MMOPPP::Identifier* id_;
  ::MMOPPP::EntityInput* move_input_;
  PROTOBUF_NAMESPACE_ID::Timestamp* sent_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.z)
}

// -------------------------------------------------------------------

// Identifier

// string name = 1;
inline void Identifier::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Identifier::name() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Identifier.name)
  return _internal_name();
}
inline void Identifier::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Identifier.name)
}
inline std::string* Identifier::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Identifier.name)
  return _internal_mutable_name();
}
inline const std::string& Identifier::_internal_name() const {
  return name_.Get();
}
inline void Identifier::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Identifier::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MMOPPP.Identifier.name)
}
inline void Identifier::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MMOPPP.Identifier.name)
}
inline void Identifier::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MMOPPP.Identifier.name)
}
inline std::string* Identifier::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Identifier::release_name() {
  // @@protoc_insertion_point(field_release:MMOPPP.Identifier.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Identifier::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Identifier.name)
}
inline std::string* Identifier::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MMOPPP.Identifier.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Identifier::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Identifier.name)
}

// string tags = 2;
inline void Identifier::clear_tags() {
  tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Identifier::tags() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Identifier.tags)
  return _internal_tags();
}
inline void Identifier::set_tags(const std::string& value) {
  _internal_set_tags(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Identifier.tags)
}
inline std::string* Identifier::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Identifier.tags)
  return _internal_mutable_tags();
}
inline const std::string& Identifier::_internal_tags() const {
  return tags_.Get();
}
inline void Identifier::_internal_set_tags(const std::string& value) {
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Identifier::set_tags(std::string&& value) {
  
  tags_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MMOPPP.Identifier.tags)
}
inline void Identifier::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MMOPPP.Identifier.tags)
}
inline void Identifier::set_tags(const char* value,
    size_t size) {
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MMOPPP.Identifier.tags)
}
inline std::string* Identifier::_internal_mutable_tags() {
  
  return tags_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Identifier::release_tags() {
  // @@protoc_insertion_point(field_release:MMOPPP.Identifier.tags)
  return tags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Identifier::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    
  } else {
    
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Identifier.tags)
}
inline std::string* Identifier::unsafe_arena_release_tags() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MMOPPP.Identifier.tags)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tags_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Identifier::unsafe_arena_set_allocated_tags(
    std::string* tags) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tags != nullptr) {
    
  } else {
    
  }
  tags_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tags, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Identifier.tags)
}

// -------------------------------------------------------------------

// EntityInput

// .MMOPPP.Vector3 direction_inputs = 3;
inline bool EntityInput::_internal_has_direction_inputs() const {
  return this != internal_default_instance() && direction_inputs_ != nullptr;
}
inline bool EntityInput::has_direction_inputs() const {
  return _internal_has_direction_inputs();
}
inline void EntityInput::clear_direction_inputs() {
  if (GetArena() == nullptr && direction_inputs_ != nullptr) {
    delete direction_inputs_;
  }
  direction_inputs_ = nullptr;
}
inline const ::MMOPPP::Vector3& EntityInput::_internal_direction_inputs() const {
  const ::MMOPPP::Vector3* p = direction_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& EntityInput::direction_inputs() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityInput.direction_inputs)
  return _internal_direction_inputs();
}
inline void EntityInput::unsafe_arena_set_allocated_direction_inputs(
    ::MMOPPP::Vector3* direction_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_inputs_);
  }
  direction_inputs_ = direction_inputs;
  if (direction_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.EntityInput.direction_inputs)
}
inline ::MMOPPP::Vector3* EntityInput::release_direction_inputs() {
  auto temp = unsafe_arena_release_direction_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* EntityInput::unsafe_arena_release_direction_inputs() {
  // @@protoc_insertion_point(field_release:MMOPPP.EntityInput.direction_inputs)
  
  ::MMOPPP::Vector3* temp = direction_inputs_;
  direction_inputs_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* EntityInput::_internal_mutable_direction_inputs() {
  
  if (direction_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    direction_inputs_ = p;
  }
  return direction_inputs_;
}
inline ::MMOPPP::Vector3* EntityInput::mutable_direction_inputs() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.EntityInput.direction_inputs)
  return _internal_mutable_direction_inputs();
}
inline void EntityInput::set_allocated_direction_inputs(::MMOPPP::Vector3* direction_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_inputs_;
  }
  if (direction_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction_inputs);
    if (message_arena != submessage_arena) {
      direction_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction_inputs, submessage_arena);
    }
    
  } else {
    
  }
  direction_inputs_ = direction_inputs;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.EntityInput.direction_inputs)
}

// .MMOPPP.Vector3 euler_rotation = 4;
inline bool EntityInput::_internal_has_euler_rotation() const {
  return this != internal_default_instance() && euler_rotation_ != nullptr;
}
inline bool EntityInput::has_euler_rotation() const {
  return _internal_has_euler_rotation();
}
inline void EntityInput::clear_euler_rotation() {
  if (GetArena() == nullptr && euler_rotation_ != nullptr) {
    delete euler_rotation_;
  }
  euler_rotation_ = nullptr;
}
inline const ::MMOPPP::Vector3& EntityInput::_internal_euler_rotation() const {
  const ::MMOPPP::Vector3* p = euler_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& EntityInput::euler_rotation() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityInput.euler_rotation)
  return _internal_euler_rotation();
}
inline void EntityInput::unsafe_arena_set_allocated_euler_rotation(
    ::MMOPPP::Vector3* euler_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_rotation_);
  }
  euler_rotation_ = euler_rotation;
  if (euler_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.EntityInput.euler_rotation)
}
inline ::MMOPPP::Vector3* EntityInput::release_euler_rotation() {
  auto temp = unsafe_arena_release_euler_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* EntityInput::unsafe_arena_release_euler_rotation() {
  // @@protoc_insertion_point(field_release:MMOPPP.EntityInput.euler_rotation)
  
  ::MMOPPP::Vector3* temp = euler_rotation_;
  euler_rotation_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* EntityInput::_internal_mutable_euler_rotation() {
  
  if (euler_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    euler_rotation_ = p;
  }
  return euler_rotation_;
}
inline ::MMOPPP::Vector3* EntityInput::mutable_euler_rotation() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.EntityInput.euler_rotation)
  return _internal_mutable_euler_rotation();
}
inline void EntityInput::set_allocated_euler_rotation(::MMOPPP::Vector3* euler_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete euler_rotation_;
  }
  if (euler_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(euler_rotation);
    if (message_arena != submessage_arena) {
      euler_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_rotation, submessage_arena);
    }
    
  } else {
    
  }
  euler_rotation_ = euler_rotation;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.EntityInput.euler_rotation)
}

// bool strafe = 5;
inline void EntityInput::clear_strafe() {
  strafe_ = false;
}
inline bool EntityInput::_internal_strafe() const {
  return strafe_;
}
inline bool EntityInput::strafe() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityInput.strafe)
  return _internal_strafe();
}
inline void EntityInput::_internal_set_strafe(bool value) {
  
  strafe_ = value;
}
inline void EntityInput::set_strafe(bool value) {
  _internal_set_strafe(value);
  // @@protoc_insertion_point(field_set:MMOPPP.EntityInput.strafe)
}

// bool sprint = 6;
inline void EntityInput::clear_sprint() {
  sprint_ = false;
}
inline bool EntityInput::_internal_sprint() const {
  return sprint_;
}
inline bool EntityInput::sprint() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityInput.sprint)
  return _internal_sprint();
}
inline void EntityInput::_internal_set_sprint(bool value) {
  
  sprint_ = value;
}
inline void EntityInput::set_sprint(bool value) {
  _internal_set_sprint(value);
  // @@protoc_insertion_point(field_set:MMOPPP.EntityInput.sprint)
}

// -------------------------------------------------------------------

// EntityUpdate

// .MMOPPP.Identifier id = 1;
inline bool EntityUpdate::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool EntityUpdate::has_id() const {
  return _internal_has_id();
}
inline void EntityUpdate::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::MMOPPP::Identifier& EntityUpdate::_internal_id() const {
  const ::MMOPPP::Identifier* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Identifier*>(
      &::MMOPPP::_Identifier_default_instance_);
}
inline const ::MMOPPP::Identifier& EntityUpdate::id() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityUpdate.id)
  return _internal_id();
}
inline void EntityUpdate::unsafe_arena_set_allocated_id(
    ::MMOPPP::Identifier* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.EntityUpdate.id)
}
inline ::MMOPPP::Identifier* EntityUpdate::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Identifier* EntityUpdate::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:MMOPPP.EntityUpdate.id)
  
  ::MMOPPP::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::MMOPPP::Identifier* EntityUpdate::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Identifier>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::MMOPPP::Identifier* EntityUpdate::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.EntityUpdate.id)
  return _internal_mutable_id();
}
inline void EntityUpdate::set_allocated_id(::MMOPPP::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.EntityUpdate.id)
}

// .MMOPPP.EntityInput predictive_inputs = 2;
inline bool EntityUpdate::_internal_has_predictive_inputs() const {
  return this != internal_default_instance() && predictive_inputs_ != nullptr;
}
inline bool EntityUpdate::has_predictive_inputs() const {
  return _internal_has_predictive_inputs();
}
inline void EntityUpdate::clear_predictive_inputs() {
  if (GetArena() == nullptr && predictive_inputs_ != nullptr) {
    delete predictive_inputs_;
  }
  predictive_inputs_ = nullptr;
}
inline const ::MMOPPP::EntityInput& EntityUpdate::_internal_predictive_inputs() const {
  const ::MMOPPP::EntityInput* p = predictive_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::EntityInput*>(
      &::MMOPPP::_EntityInput_default_instance_);
}
inline const ::MMOPPP::EntityInput& EntityUpdate::predictive_inputs() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityUpdate.predictive_inputs)
  return _internal_predictive_inputs();
}
inline void EntityUpdate::unsafe_arena_set_allocated_predictive_inputs(
    ::MMOPPP::EntityInput* predictive_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predictive_inputs_);
  }
  predictive_inputs_ = predictive_inputs;
  if (predictive_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.EntityUpdate.predictive_inputs)
}
inline ::MMOPPP::EntityInput* EntityUpdate::release_predictive_inputs() {
  auto temp = unsafe_arena_release_predictive_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::EntityInput* EntityUpdate::unsafe_arena_release_predictive_inputs() {
  // @@protoc_insertion_point(field_release:MMOPPP.EntityUpdate.predictive_inputs)
  
  ::MMOPPP::EntityInput* temp = predictive_inputs_;
  predictive_inputs_ = nullptr;
  return temp;
}
inline ::MMOPPP::EntityInput* EntityUpdate::_internal_mutable_predictive_inputs() {
  
  if (predictive_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::EntityInput>(GetArena());
    predictive_inputs_ = p;
  }
  return predictive_inputs_;
}
inline ::MMOPPP::EntityInput* EntityUpdate::mutable_predictive_inputs() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.EntityUpdate.predictive_inputs)
  return _internal_mutable_predictive_inputs();
}
inline void EntityUpdate::set_allocated_predictive_inputs(::MMOPPP::EntityInput* predictive_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete predictive_inputs_;
  }
  if (predictive_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predictive_inputs);
    if (message_arena != submessage_arena) {
      predictive_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predictive_inputs, submessage_arena);
    }
    
  } else {
    
  }
  predictive_inputs_ = predictive_inputs;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.EntityUpdate.predictive_inputs)
}

// .MMOPPP.Vector3 position = 3;
inline bool EntityUpdate::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool EntityUpdate::has_position() const {
  return _internal_has_position();
}
inline void EntityUpdate::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::MMOPPP::Vector3& EntityUpdate::_internal_position() const {
  const ::MMOPPP::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& EntityUpdate::position() const {
  // @@protoc_insertion_point(field_get:MMOPPP.EntityUpdate.position)
  return _internal_position();
}
inline void EntityUpdate::unsafe_arena_set_allocated_position(
    ::MMOPPP::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.EntityUpdate.position)
}
inline ::MMOPPP::Vector3* EntityUpdate::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* EntityUpdate::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:MMOPPP.EntityUpdate.position)
  
  ::MMOPPP::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* EntityUpdate::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::MMOPPP::Vector3* EntityUpdate::mutable_position() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.EntityUpdate.position)
  return _internal_mutable_position();
}
inline void EntityUpdate::set_allocated_position(::MMOPPP::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.EntityUpdate.position)
}

// -------------------------------------------------------------------

// WorldUpdate

// repeated .MMOPPP.EntityUpdate updates = 1;
inline int WorldUpdate::_internal_updates_size() const {
  return updates_.size();
}
inline int WorldUpdate::updates_size() const {
  return _internal_updates_size();
}
inline void WorldUpdate::clear_updates() {
  updates_.Clear();
}
inline ::MMOPPP::EntityUpdate* WorldUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:MMOPPP.WorldUpdate.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::EntityUpdate >*
WorldUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:MMOPPP.WorldUpdate.updates)
  return &updates_;
}
inline const ::MMOPPP::EntityUpdate& WorldUpdate::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::MMOPPP::EntityUpdate& WorldUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:MMOPPP.WorldUpdate.updates)
  return _internal_updates(index);
}
inline ::MMOPPP::EntityUpdate* WorldUpdate::_internal_add_updates() {
  return updates_.Add();
}
inline ::MMOPPP::EntityUpdate* WorldUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:MMOPPP.WorldUpdate.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::EntityUpdate >&
WorldUpdate::updates() const {
  // @@protoc_insertion_point(field_list:MMOPPP.WorldUpdate.updates)
  return updates_;
}

// -------------------------------------------------------------------

// PlayerInput

// .MMOPPP.Identifier id = 1;
inline bool PlayerInput::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool PlayerInput::has_id() const {
  return _internal_has_id();
}
inline void PlayerInput::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::MMOPPP::Identifier& PlayerInput::_internal_id() const {
  const ::MMOPPP::Identifier* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Identifier*>(
      &::MMOPPP::_Identifier_default_instance_);
}
inline const ::MMOPPP::Identifier& PlayerInput::id() const {
  // @@protoc_insertion_point(field_get:MMOPPP.PlayerInput.id)
  return _internal_id();
}
inline void PlayerInput::unsafe_arena_set_allocated_id(
    ::MMOPPP::Identifier* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.PlayerInput.id)
}
inline ::MMOPPP::Identifier* PlayerInput::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Identifier* PlayerInput::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:MMOPPP.PlayerInput.id)
  
  ::MMOPPP::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::MMOPPP::Identifier* PlayerInput::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Identifier>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::MMOPPP::Identifier* PlayerInput::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.PlayerInput.id)
  return _internal_mutable_id();
}
inline void PlayerInput::set_allocated_id(::MMOPPP::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.PlayerInput.id)
}

// .MMOPPP.EntityInput move_input = 2;
inline bool PlayerInput::_internal_has_move_input() const {
  return this != internal_default_instance() && move_input_ != nullptr;
}
inline bool PlayerInput::has_move_input() const {
  return _internal_has_move_input();
}
inline void PlayerInput::clear_move_input() {
  if (GetArena() == nullptr && move_input_ != nullptr) {
    delete move_input_;
  }
  move_input_ = nullptr;
}
inline const ::MMOPPP::EntityInput& PlayerInput::_internal_move_input() const {
  const ::MMOPPP::EntityInput* p = move_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::EntityInput*>(
      &::MMOPPP::_EntityInput_default_instance_);
}
inline const ::MMOPPP::EntityInput& PlayerInput::move_input() const {
  // @@protoc_insertion_point(field_get:MMOPPP.PlayerInput.move_input)
  return _internal_move_input();
}
inline void PlayerInput::unsafe_arena_set_allocated_move_input(
    ::MMOPPP::EntityInput* move_input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_input_);
  }
  move_input_ = move_input;
  if (move_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.PlayerInput.move_input)
}
inline ::MMOPPP::EntityInput* PlayerInput::release_move_input() {
  auto temp = unsafe_arena_release_move_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::EntityInput* PlayerInput::unsafe_arena_release_move_input() {
  // @@protoc_insertion_point(field_release:MMOPPP.PlayerInput.move_input)
  
  ::MMOPPP::EntityInput* temp = move_input_;
  move_input_ = nullptr;
  return temp;
}
inline ::MMOPPP::EntityInput* PlayerInput::_internal_mutable_move_input() {
  
  if (move_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::EntityInput>(GetArena());
    move_input_ = p;
  }
  return move_input_;
}
inline ::MMOPPP::EntityInput* PlayerInput::mutable_move_input() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.PlayerInput.move_input)
  return _internal_mutable_move_input();
}
inline void PlayerInput::set_allocated_move_input(::MMOPPP::EntityInput* move_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete move_input_;
  }
  if (move_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(move_input);
    if (message_arena != submessage_arena) {
      move_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_input, submessage_arena);
    }
    
  } else {
    
  }
  move_input_ = move_input;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.PlayerInput.move_input)
}

// .google.protobuf.Timestamp sent_time = 15;
inline bool PlayerInput::_internal_has_sent_time() const {
  return this != internal_default_instance() && sent_time_ != nullptr;
}
inline bool PlayerInput::has_sent_time() const {
  return _internal_has_sent_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PlayerInput::_internal_sent_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = sent_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PlayerInput::sent_time() const {
  // @@protoc_insertion_point(field_get:MMOPPP.PlayerInput.sent_time)
  return _internal_sent_time();
}
inline void PlayerInput::unsafe_arena_set_allocated_sent_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* sent_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time_);
  }
  sent_time_ = sent_time;
  if (sent_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.PlayerInput.sent_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PlayerInput::release_sent_time() {
  auto temp = unsafe_arena_release_sent_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PlayerInput::unsafe_arena_release_sent_time() {
  // @@protoc_insertion_point(field_release:MMOPPP.PlayerInput.sent_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = sent_time_;
  sent_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PlayerInput::_internal_mutable_sent_time() {
  
  if (sent_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    sent_time_ = p;
  }
  return sent_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PlayerInput::mutable_sent_time() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.PlayerInput.sent_time)
  return _internal_mutable_sent_time();
}
inline void PlayerInput::set_allocated_sent_time(PROTOBUF_NAMESPACE_ID::Timestamp* sent_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time_);
  }
  if (sent_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time)->GetArena();
    if (message_arena != submessage_arena) {
      sent_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_time, submessage_arena);
    }
    
  } else {
    
  }
  sent_time_ = sent_time;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.PlayerInput.sent_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MMOPPP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto
