// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOPPPMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MMOPPPMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MMOPPPMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MMOPPPMessages_2eproto;
namespace MMOPPP {
class ClientInput;
class ClientInputDefaultTypeInternal;
extern ClientInputDefaultTypeInternal _ClientInput_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class ServerUpdate;
class ServerUpdateDefaultTypeInternal;
extern ServerUpdateDefaultTypeInternal _ServerUpdate_default_instance_;
class ServerUpdates;
class ServerUpdatesDefaultTypeInternal;
extern ServerUpdatesDefaultTypeInternal _ServerUpdates_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace MMOPPP
PROTOBUF_NAMESPACE_OPEN
template<> ::MMOPPP::ClientInput* Arena::CreateMaybeMessage<::MMOPPP::ClientInput>(Arena*);
template<> ::MMOPPP::Input* Arena::CreateMaybeMessage<::MMOPPP::Input>(Arena*);
template<> ::MMOPPP::ServerUpdate* Arena::CreateMaybeMessage<::MMOPPP::ServerUpdate>(Arena*);
template<> ::MMOPPP::ServerUpdates* Arena::CreateMaybeMessage<::MMOPPP::ServerUpdates>(Arena*);
template<> ::MMOPPP::Vector3* Arena::CreateMaybeMessage<::MMOPPP::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MMOPPP {

// ===================================================================

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {};
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:MMOPPP.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class Input PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.Input) */ {
 public:
  inline Input() : Input(nullptr) {};
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerMoveInputsFieldNumber = 3,
    kEulerBodyRotationFieldNumber = 4,
    kEulerCameraRotationFieldNumber = 5,
    kSentTimeFieldNumber = 15,
    kStrafeFieldNumber = 6,
    kSprintFieldNumber = 7,
  };
  // .MMOPPP.Vector3 player_move_inputs = 3;
  bool has_player_move_inputs() const;
  private:
  bool _internal_has_player_move_inputs() const;
  public:
  void clear_player_move_inputs();
  const ::MMOPPP::Vector3& player_move_inputs() const;
  ::MMOPPP::Vector3* release_player_move_inputs();
  ::MMOPPP::Vector3* mutable_player_move_inputs();
  void set_allocated_player_move_inputs(::MMOPPP::Vector3* player_move_inputs);
  private:
  const ::MMOPPP::Vector3& _internal_player_move_inputs() const;
  ::MMOPPP::Vector3* _internal_mutable_player_move_inputs();
  public:
  void unsafe_arena_set_allocated_player_move_inputs(
      ::MMOPPP::Vector3* player_move_inputs);
  ::MMOPPP::Vector3* unsafe_arena_release_player_move_inputs();

  // .MMOPPP.Vector3 euler_body_rotation = 4;
  bool has_euler_body_rotation() const;
  private:
  bool _internal_has_euler_body_rotation() const;
  public:
  void clear_euler_body_rotation();
  const ::MMOPPP::Vector3& euler_body_rotation() const;
  ::MMOPPP::Vector3* release_euler_body_rotation();
  ::MMOPPP::Vector3* mutable_euler_body_rotation();
  void set_allocated_euler_body_rotation(::MMOPPP::Vector3* euler_body_rotation);
  private:
  const ::MMOPPP::Vector3& _internal_euler_body_rotation() const;
  ::MMOPPP::Vector3* _internal_mutable_euler_body_rotation();
  public:
  void unsafe_arena_set_allocated_euler_body_rotation(
      ::MMOPPP::Vector3* euler_body_rotation);
  ::MMOPPP::Vector3* unsafe_arena_release_euler_body_rotation();

  // .MMOPPP.Vector3 euler_camera_rotation = 5;
  bool has_euler_camera_rotation() const;
  private:
  bool _internal_has_euler_camera_rotation() const;
  public:
  void clear_euler_camera_rotation();
  const ::MMOPPP::Vector3& euler_camera_rotation() const;
  ::MMOPPP::Vector3* release_euler_camera_rotation();
  ::MMOPPP::Vector3* mutable_euler_camera_rotation();
  void set_allocated_euler_camera_rotation(::MMOPPP::Vector3* euler_camera_rotation);
  private:
  const ::MMOPPP::Vector3& _internal_euler_camera_rotation() const;
  ::MMOPPP::Vector3* _internal_mutable_euler_camera_rotation();
  public:
  void unsafe_arena_set_allocated_euler_camera_rotation(
      ::MMOPPP::Vector3* euler_camera_rotation);
  ::MMOPPP::Vector3* unsafe_arena_release_euler_camera_rotation();

  // .google.protobuf.Timestamp sent_time = 15;
  bool has_sent_time() const;
  private:
  bool _internal_has_sent_time() const;
  public:
  void clear_sent_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& sent_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_sent_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sent_time();
  void set_allocated_sent_time(PROTOBUF_NAMESPACE_ID::Timestamp* sent_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sent_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sent_time();
  public:
  void unsafe_arena_set_allocated_sent_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* sent_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sent_time();

  // bool strafe = 6;
  void clear_strafe();
  bool strafe() const;
  void set_strafe(bool value);
  private:
  bool _internal_strafe() const;
  void _internal_set_strafe(bool value);
  public:

  // bool sprint = 7;
  void clear_sprint();
  bool sprint() const;
  void set_sprint(bool value);
  private:
  bool _internal_sprint() const;
  void _internal_set_sprint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MMOPPP.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MMOPPP::Vector3* player_move_inputs_;
  ::MMOPPP::Vector3* euler_body_rotation_;
  ::MMOPPP::Vector3* euler_camera_rotation_;
  PROTOBUF_NAMESPACE_ID::Timestamp* sent_time_;
  bool strafe_;
  bool sprint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class ServerUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.ServerUpdate) */ {
 public:
  inline ServerUpdate() : ServerUpdate(nullptr) {};
  virtual ~ServerUpdate();

  ServerUpdate(const ServerUpdate& from);
  ServerUpdate(ServerUpdate&& from) noexcept
    : ServerUpdate() {
    *this = ::std::move(from);
  }

  inline ServerUpdate& operator=(const ServerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUpdate& operator=(ServerUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerUpdate* internal_default_instance() {
    return reinterpret_cast<const ServerUpdate*>(
               &_ServerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerUpdate& a, ServerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUpdate* New() const final {
    return CreateMaybeMessage<ServerUpdate>(nullptr);
  }

  ServerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerUpdate& from);
  void MergeFrom(const ServerUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.ServerUpdate";
  }
  protected:
  explicit ServerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPastInputsFieldNumber = 2,
    kNameFieldNumber = 1,
    kLocationFieldNumber = 3,
    kBodyRotationFieldNumber = 4,
  };
  // repeated .MMOPPP.Input past_inputs = 2;
  int past_inputs_size() const;
  private:
  int _internal_past_inputs_size() const;
  public:
  void clear_past_inputs();
  ::MMOPPP::Input* mutable_past_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::Input >*
      mutable_past_inputs();
  private:
  const ::MMOPPP::Input& _internal_past_inputs(int index) const;
  ::MMOPPP::Input* _internal_add_past_inputs();
  public:
  const ::MMOPPP::Input& past_inputs(int index) const;
  ::MMOPPP::Input* add_past_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::Input >&
      past_inputs() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MMOPPP.Vector3 location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::MMOPPP::Vector3& location() const;
  ::MMOPPP::Vector3* release_location();
  ::MMOPPP::Vector3* mutable_location();
  void set_allocated_location(::MMOPPP::Vector3* location);
  private:
  const ::MMOPPP::Vector3& _internal_location() const;
  ::MMOPPP::Vector3* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::MMOPPP::Vector3* location);
  ::MMOPPP::Vector3* unsafe_arena_release_location();

  // .MMOPPP.Vector3 body_rotation = 4;
  bool has_body_rotation() const;
  private:
  bool _internal_has_body_rotation() const;
  public:
  void clear_body_rotation();
  const ::MMOPPP::Vector3& body_rotation() const;
  ::MMOPPP::Vector3* release_body_rotation();
  ::MMOPPP::Vector3* mutable_body_rotation();
  void set_allocated_body_rotation(::MMOPPP::Vector3* body_rotation);
  private:
  const ::MMOPPP::Vector3& _internal_body_rotation() const;
  ::MMOPPP::Vector3* _internal_mutable_body_rotation();
  public:
  void unsafe_arena_set_allocated_body_rotation(
      ::MMOPPP::Vector3* body_rotation);
  ::MMOPPP::Vector3* unsafe_arena_release_body_rotation();

  // @@protoc_insertion_point(class_scope:MMOPPP.ServerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::Input > past_inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::MMOPPP::Vector3* location_;
  ::MMOPPP::Vector3* body_rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class ServerUpdates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.ServerUpdates) */ {
 public:
  inline ServerUpdates() : ServerUpdates(nullptr) {};
  virtual ~ServerUpdates();

  ServerUpdates(const ServerUpdates& from);
  ServerUpdates(ServerUpdates&& from) noexcept
    : ServerUpdates() {
    *this = ::std::move(from);
  }

  inline ServerUpdates& operator=(const ServerUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUpdates& operator=(ServerUpdates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerUpdates* internal_default_instance() {
    return reinterpret_cast<const ServerUpdates*>(
               &_ServerUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerUpdates& a, ServerUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUpdates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUpdates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUpdates* New() const final {
    return CreateMaybeMessage<ServerUpdates>(nullptr);
  }

  ServerUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUpdates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerUpdates& from);
  void MergeFrom(const ServerUpdates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.ServerUpdates";
  }
  protected:
  explicit ServerUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .MMOPPP.ServerUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::MMOPPP::ServerUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::ServerUpdate >*
      mutable_updates();
  private:
  const ::MMOPPP::ServerUpdate& _internal_updates(int index) const;
  ::MMOPPP::ServerUpdate* _internal_add_updates();
  public:
  const ::MMOPPP::ServerUpdate& updates(int index) const;
  ::MMOPPP::ServerUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::ServerUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:MMOPPP.ServerUpdates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::ServerUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// -------------------------------------------------------------------

class ClientInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMOPPP.ClientInput) */ {
 public:
  inline ClientInput() : ClientInput(nullptr) {};
  virtual ~ClientInput();

  ClientInput(const ClientInput& from);
  ClientInput(ClientInput&& from) noexcept
    : ClientInput() {
    *this = ::std::move(from);
  }

  inline ClientInput& operator=(const ClientInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInput& operator=(ClientInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInput* internal_default_instance() {
    return reinterpret_cast<const ClientInput*>(
               &_ClientInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientInput& a, ClientInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientInput* New() const final {
    return CreateMaybeMessage<ClientInput>(nullptr);
  }

  ClientInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientInput& from);
  void MergeFrom(const ClientInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMOPPP.ClientInput";
  }
  protected:
  explicit ClientInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MMOPPPMessages_2eproto);
    return ::descriptor_table_MMOPPPMessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MMOPPP.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::MMOPPP::Input& input() const;
  ::MMOPPP::Input* release_input();
  ::MMOPPP::Input* mutable_input();
  void set_allocated_input(::MMOPPP::Input* input);
  private:
  const ::MMOPPP::Input& _internal_input() const;
  ::MMOPPP::Input* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::MMOPPP::Input* input);
  ::MMOPPP::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:MMOPPP.ClientInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::MMOPPP::Input* input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MMOPPPMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Vector3.z)
}

// -------------------------------------------------------------------

// Input

// .MMOPPP.Vector3 player_move_inputs = 3;
inline bool Input::_internal_has_player_move_inputs() const {
  return this != internal_default_instance() && player_move_inputs_ != nullptr;
}
inline bool Input::has_player_move_inputs() const {
  return _internal_has_player_move_inputs();
}
inline void Input::clear_player_move_inputs() {
  if (GetArena() == nullptr && player_move_inputs_ != nullptr) {
    delete player_move_inputs_;
  }
  player_move_inputs_ = nullptr;
}
inline const ::MMOPPP::Vector3& Input::_internal_player_move_inputs() const {
  const ::MMOPPP::Vector3* p = player_move_inputs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& Input::player_move_inputs() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.player_move_inputs)
  return _internal_player_move_inputs();
}
inline void Input::unsafe_arena_set_allocated_player_move_inputs(
    ::MMOPPP::Vector3* player_move_inputs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_inputs_);
  }
  player_move_inputs_ = player_move_inputs;
  if (player_move_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Input.player_move_inputs)
}
inline ::MMOPPP::Vector3* Input::release_player_move_inputs() {
  auto temp = unsafe_arena_release_player_move_inputs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* Input::unsafe_arena_release_player_move_inputs() {
  // @@protoc_insertion_point(field_release:MMOPPP.Input.player_move_inputs)
  
  ::MMOPPP::Vector3* temp = player_move_inputs_;
  player_move_inputs_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* Input::_internal_mutable_player_move_inputs() {
  
  if (player_move_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    player_move_inputs_ = p;
  }
  return player_move_inputs_;
}
inline ::MMOPPP::Vector3* Input::mutable_player_move_inputs() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Input.player_move_inputs)
  return _internal_mutable_player_move_inputs();
}
inline void Input::set_allocated_player_move_inputs(::MMOPPP::Vector3* player_move_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_move_inputs_;
  }
  if (player_move_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_move_inputs);
    if (message_arena != submessage_arena) {
      player_move_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_inputs, submessage_arena);
    }
    
  } else {
    
  }
  player_move_inputs_ = player_move_inputs;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Input.player_move_inputs)
}

// .MMOPPP.Vector3 euler_body_rotation = 4;
inline bool Input::_internal_has_euler_body_rotation() const {
  return this != internal_default_instance() && euler_body_rotation_ != nullptr;
}
inline bool Input::has_euler_body_rotation() const {
  return _internal_has_euler_body_rotation();
}
inline void Input::clear_euler_body_rotation() {
  if (GetArena() == nullptr && euler_body_rotation_ != nullptr) {
    delete euler_body_rotation_;
  }
  euler_body_rotation_ = nullptr;
}
inline const ::MMOPPP::Vector3& Input::_internal_euler_body_rotation() const {
  const ::MMOPPP::Vector3* p = euler_body_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& Input::euler_body_rotation() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.euler_body_rotation)
  return _internal_euler_body_rotation();
}
inline void Input::unsafe_arena_set_allocated_euler_body_rotation(
    ::MMOPPP::Vector3* euler_body_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_body_rotation_);
  }
  euler_body_rotation_ = euler_body_rotation;
  if (euler_body_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Input.euler_body_rotation)
}
inline ::MMOPPP::Vector3* Input::release_euler_body_rotation() {
  auto temp = unsafe_arena_release_euler_body_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* Input::unsafe_arena_release_euler_body_rotation() {
  // @@protoc_insertion_point(field_release:MMOPPP.Input.euler_body_rotation)
  
  ::MMOPPP::Vector3* temp = euler_body_rotation_;
  euler_body_rotation_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* Input::_internal_mutable_euler_body_rotation() {
  
  if (euler_body_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    euler_body_rotation_ = p;
  }
  return euler_body_rotation_;
}
inline ::MMOPPP::Vector3* Input::mutable_euler_body_rotation() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Input.euler_body_rotation)
  return _internal_mutable_euler_body_rotation();
}
inline void Input::set_allocated_euler_body_rotation(::MMOPPP::Vector3* euler_body_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete euler_body_rotation_;
  }
  if (euler_body_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(euler_body_rotation);
    if (message_arena != submessage_arena) {
      euler_body_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_body_rotation, submessage_arena);
    }
    
  } else {
    
  }
  euler_body_rotation_ = euler_body_rotation;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Input.euler_body_rotation)
}

// .MMOPPP.Vector3 euler_camera_rotation = 5;
inline bool Input::_internal_has_euler_camera_rotation() const {
  return this != internal_default_instance() && euler_camera_rotation_ != nullptr;
}
inline bool Input::has_euler_camera_rotation() const {
  return _internal_has_euler_camera_rotation();
}
inline void Input::clear_euler_camera_rotation() {
  if (GetArena() == nullptr && euler_camera_rotation_ != nullptr) {
    delete euler_camera_rotation_;
  }
  euler_camera_rotation_ = nullptr;
}
inline const ::MMOPPP::Vector3& Input::_internal_euler_camera_rotation() const {
  const ::MMOPPP::Vector3* p = euler_camera_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& Input::euler_camera_rotation() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.euler_camera_rotation)
  return _internal_euler_camera_rotation();
}
inline void Input::unsafe_arena_set_allocated_euler_camera_rotation(
    ::MMOPPP::Vector3* euler_camera_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_camera_rotation_);
  }
  euler_camera_rotation_ = euler_camera_rotation;
  if (euler_camera_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Input.euler_camera_rotation)
}
inline ::MMOPPP::Vector3* Input::release_euler_camera_rotation() {
  auto temp = unsafe_arena_release_euler_camera_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* Input::unsafe_arena_release_euler_camera_rotation() {
  // @@protoc_insertion_point(field_release:MMOPPP.Input.euler_camera_rotation)
  
  ::MMOPPP::Vector3* temp = euler_camera_rotation_;
  euler_camera_rotation_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* Input::_internal_mutable_euler_camera_rotation() {
  
  if (euler_camera_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    euler_camera_rotation_ = p;
  }
  return euler_camera_rotation_;
}
inline ::MMOPPP::Vector3* Input::mutable_euler_camera_rotation() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Input.euler_camera_rotation)
  return _internal_mutable_euler_camera_rotation();
}
inline void Input::set_allocated_euler_camera_rotation(::MMOPPP::Vector3* euler_camera_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete euler_camera_rotation_;
  }
  if (euler_camera_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(euler_camera_rotation);
    if (message_arena != submessage_arena) {
      euler_camera_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_camera_rotation, submessage_arena);
    }
    
  } else {
    
  }
  euler_camera_rotation_ = euler_camera_rotation;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Input.euler_camera_rotation)
}

// bool strafe = 6;
inline void Input::clear_strafe() {
  strafe_ = false;
}
inline bool Input::_internal_strafe() const {
  return strafe_;
}
inline bool Input::strafe() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.strafe)
  return _internal_strafe();
}
inline void Input::_internal_set_strafe(bool value) {
  
  strafe_ = value;
}
inline void Input::set_strafe(bool value) {
  _internal_set_strafe(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Input.strafe)
}

// bool sprint = 7;
inline void Input::clear_sprint() {
  sprint_ = false;
}
inline bool Input::_internal_sprint() const {
  return sprint_;
}
inline bool Input::sprint() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.sprint)
  return _internal_sprint();
}
inline void Input::_internal_set_sprint(bool value) {
  
  sprint_ = value;
}
inline void Input::set_sprint(bool value) {
  _internal_set_sprint(value);
  // @@protoc_insertion_point(field_set:MMOPPP.Input.sprint)
}

// .google.protobuf.Timestamp sent_time = 15;
inline bool Input::_internal_has_sent_time() const {
  return this != internal_default_instance() && sent_time_ != nullptr;
}
inline bool Input::has_sent_time() const {
  return _internal_has_sent_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::_internal_sent_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = sent_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Input::sent_time() const {
  // @@protoc_insertion_point(field_get:MMOPPP.Input.sent_time)
  return _internal_sent_time();
}
inline void Input::unsafe_arena_set_allocated_sent_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* sent_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time_);
  }
  sent_time_ = sent_time;
  if (sent_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.Input.sent_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::release_sent_time() {
  auto temp = unsafe_arena_release_sent_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::unsafe_arena_release_sent_time() {
  // @@protoc_insertion_point(field_release:MMOPPP.Input.sent_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = sent_time_;
  sent_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::_internal_mutable_sent_time() {
  
  if (sent_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    sent_time_ = p;
  }
  return sent_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Input::mutable_sent_time() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.Input.sent_time)
  return _internal_mutable_sent_time();
}
inline void Input::set_allocated_sent_time(PROTOBUF_NAMESPACE_ID::Timestamp* sent_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time_);
  }
  if (sent_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_time)->GetArena();
    if (message_arena != submessage_arena) {
      sent_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_time, submessage_arena);
    }
    
  } else {
    
  }
  sent_time_ = sent_time;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.Input.sent_time)
}

// -------------------------------------------------------------------

// ServerUpdate

// string name = 1;
inline void ServerUpdate::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerUpdate::name() const {
  // @@protoc_insertion_point(field_get:MMOPPP.ServerUpdate.name)
  return _internal_name();
}
inline void ServerUpdate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MMOPPP.ServerUpdate.name)
}
inline std::string* ServerUpdate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ServerUpdate.name)
  return _internal_mutable_name();
}
inline const std::string& ServerUpdate::_internal_name() const {
  return name_.Get();
}
inline void ServerUpdate::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerUpdate::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MMOPPP.ServerUpdate.name)
}
inline void ServerUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MMOPPP.ServerUpdate.name)
}
inline void ServerUpdate::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MMOPPP.ServerUpdate.name)
}
inline std::string* ServerUpdate::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerUpdate::release_name() {
  // @@protoc_insertion_point(field_release:MMOPPP.ServerUpdate.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.ServerUpdate.name)
}
inline std::string* ServerUpdate::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MMOPPP.ServerUpdate.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerUpdate::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.ServerUpdate.name)
}

// repeated .MMOPPP.Input past_inputs = 2;
inline int ServerUpdate::_internal_past_inputs_size() const {
  return past_inputs_.size();
}
inline int ServerUpdate::past_inputs_size() const {
  return _internal_past_inputs_size();
}
inline void ServerUpdate::clear_past_inputs() {
  past_inputs_.Clear();
}
inline ::MMOPPP::Input* ServerUpdate::mutable_past_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ServerUpdate.past_inputs)
  return past_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::Input >*
ServerUpdate::mutable_past_inputs() {
  // @@protoc_insertion_point(field_mutable_list:MMOPPP.ServerUpdate.past_inputs)
  return &past_inputs_;
}
inline const ::MMOPPP::Input& ServerUpdate::_internal_past_inputs(int index) const {
  return past_inputs_.Get(index);
}
inline const ::MMOPPP::Input& ServerUpdate::past_inputs(int index) const {
  // @@protoc_insertion_point(field_get:MMOPPP.ServerUpdate.past_inputs)
  return _internal_past_inputs(index);
}
inline ::MMOPPP::Input* ServerUpdate::_internal_add_past_inputs() {
  return past_inputs_.Add();
}
inline ::MMOPPP::Input* ServerUpdate::add_past_inputs() {
  // @@protoc_insertion_point(field_add:MMOPPP.ServerUpdate.past_inputs)
  return _internal_add_past_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::Input >&
ServerUpdate::past_inputs() const {
  // @@protoc_insertion_point(field_list:MMOPPP.ServerUpdate.past_inputs)
  return past_inputs_;
}

// .MMOPPP.Vector3 location = 3;
inline bool ServerUpdate::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool ServerUpdate::has_location() const {
  return _internal_has_location();
}
inline void ServerUpdate::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::MMOPPP::Vector3& ServerUpdate::_internal_location() const {
  const ::MMOPPP::Vector3* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& ServerUpdate::location() const {
  // @@protoc_insertion_point(field_get:MMOPPP.ServerUpdate.location)
  return _internal_location();
}
inline void ServerUpdate::unsafe_arena_set_allocated_location(
    ::MMOPPP::Vector3* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.ServerUpdate.location)
}
inline ::MMOPPP::Vector3* ServerUpdate::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* ServerUpdate::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:MMOPPP.ServerUpdate.location)
  
  ::MMOPPP::Vector3* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* ServerUpdate::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::MMOPPP::Vector3* ServerUpdate::mutable_location() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ServerUpdate.location)
  return _internal_mutable_location();
}
inline void ServerUpdate::set_allocated_location(::MMOPPP::Vector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.ServerUpdate.location)
}

// .MMOPPP.Vector3 body_rotation = 4;
inline bool ServerUpdate::_internal_has_body_rotation() const {
  return this != internal_default_instance() && body_rotation_ != nullptr;
}
inline bool ServerUpdate::has_body_rotation() const {
  return _internal_has_body_rotation();
}
inline void ServerUpdate::clear_body_rotation() {
  if (GetArena() == nullptr && body_rotation_ != nullptr) {
    delete body_rotation_;
  }
  body_rotation_ = nullptr;
}
inline const ::MMOPPP::Vector3& ServerUpdate::_internal_body_rotation() const {
  const ::MMOPPP::Vector3* p = body_rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Vector3*>(
      &::MMOPPP::_Vector3_default_instance_);
}
inline const ::MMOPPP::Vector3& ServerUpdate::body_rotation() const {
  // @@protoc_insertion_point(field_get:MMOPPP.ServerUpdate.body_rotation)
  return _internal_body_rotation();
}
inline void ServerUpdate::unsafe_arena_set_allocated_body_rotation(
    ::MMOPPP::Vector3* body_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_rotation_);
  }
  body_rotation_ = body_rotation;
  if (body_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.ServerUpdate.body_rotation)
}
inline ::MMOPPP::Vector3* ServerUpdate::release_body_rotation() {
  auto temp = unsafe_arena_release_body_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Vector3* ServerUpdate::unsafe_arena_release_body_rotation() {
  // @@protoc_insertion_point(field_release:MMOPPP.ServerUpdate.body_rotation)
  
  ::MMOPPP::Vector3* temp = body_rotation_;
  body_rotation_ = nullptr;
  return temp;
}
inline ::MMOPPP::Vector3* ServerUpdate::_internal_mutable_body_rotation() {
  
  if (body_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Vector3>(GetArena());
    body_rotation_ = p;
  }
  return body_rotation_;
}
inline ::MMOPPP::Vector3* ServerUpdate::mutable_body_rotation() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ServerUpdate.body_rotation)
  return _internal_mutable_body_rotation();
}
inline void ServerUpdate::set_allocated_body_rotation(::MMOPPP::Vector3* body_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_rotation_;
  }
  if (body_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body_rotation);
    if (message_arena != submessage_arena) {
      body_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_rotation, submessage_arena);
    }
    
  } else {
    
  }
  body_rotation_ = body_rotation;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.ServerUpdate.body_rotation)
}

// -------------------------------------------------------------------

// ServerUpdates

// repeated .MMOPPP.ServerUpdate updates = 1;
inline int ServerUpdates::_internal_updates_size() const {
  return updates_.size();
}
inline int ServerUpdates::updates_size() const {
  return _internal_updates_size();
}
inline void ServerUpdates::clear_updates() {
  updates_.Clear();
}
inline ::MMOPPP::ServerUpdate* ServerUpdates::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ServerUpdates.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::ServerUpdate >*
ServerUpdates::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:MMOPPP.ServerUpdates.updates)
  return &updates_;
}
inline const ::MMOPPP::ServerUpdate& ServerUpdates::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::MMOPPP::ServerUpdate& ServerUpdates::updates(int index) const {
  // @@protoc_insertion_point(field_get:MMOPPP.ServerUpdates.updates)
  return _internal_updates(index);
}
inline ::MMOPPP::ServerUpdate* ServerUpdates::_internal_add_updates() {
  return updates_.Add();
}
inline ::MMOPPP::ServerUpdate* ServerUpdates::add_updates() {
  // @@protoc_insertion_point(field_add:MMOPPP.ServerUpdates.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMOPPP::ServerUpdate >&
ServerUpdates::updates() const {
  // @@protoc_insertion_point(field_list:MMOPPP.ServerUpdates.updates)
  return updates_;
}

// -------------------------------------------------------------------

// ClientInput

// string name = 1;
inline void ClientInput::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientInput::name() const {
  // @@protoc_insertion_point(field_get:MMOPPP.ClientInput.name)
  return _internal_name();
}
inline void ClientInput::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MMOPPP.ClientInput.name)
}
inline std::string* ClientInput::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ClientInput.name)
  return _internal_mutable_name();
}
inline const std::string& ClientInput::_internal_name() const {
  return name_.Get();
}
inline void ClientInput::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientInput::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MMOPPP.ClientInput.name)
}
inline void ClientInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MMOPPP.ClientInput.name)
}
inline void ClientInput::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MMOPPP.ClientInput.name)
}
inline std::string* ClientInput::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientInput::release_name() {
  // @@protoc_insertion_point(field_release:MMOPPP.ClientInput.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientInput::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.ClientInput.name)
}
inline std::string* ClientInput::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MMOPPP.ClientInput.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientInput::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.ClientInput.name)
}

// .MMOPPP.Input input = 2;
inline bool ClientInput::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ClientInput::has_input() const {
  return _internal_has_input();
}
inline void ClientInput::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::MMOPPP::Input& ClientInput::_internal_input() const {
  const ::MMOPPP::Input* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MMOPPP::Input*>(
      &::MMOPPP::_Input_default_instance_);
}
inline const ::MMOPPP::Input& ClientInput::input() const {
  // @@protoc_insertion_point(field_get:MMOPPP.ClientInput.input)
  return _internal_input();
}
inline void ClientInput::unsafe_arena_set_allocated_input(
    ::MMOPPP::Input* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MMOPPP.ClientInput.input)
}
inline ::MMOPPP::Input* ClientInput::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MMOPPP::Input* ClientInput::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:MMOPPP.ClientInput.input)
  
  ::MMOPPP::Input* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::MMOPPP::Input* ClientInput::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::MMOPPP::Input>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::MMOPPP::Input* ClientInput::mutable_input() {
  // @@protoc_insertion_point(field_mutable:MMOPPP.ClientInput.input)
  return _internal_mutable_input();
}
inline void ClientInput::set_allocated_input(::MMOPPP::Input* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:MMOPPP.ClientInput.input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MMOPPP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MMOPPPMessages_2eproto
